import os #Here we import the os module, which provides functions for interacting with the operating system.

def print_board(board): #print_board function is defined with board as arguement and display the board in a user-freindly format
    """Prints the current state of the Tic Tac Toe board."""
    print(board[0] + " | " + board[1] + " | " + board[2])
    print("--+---+--")
    print(board[3] + " | " + board[4] + " | " + board[5])
    print("--+---+--")
    print(board[6] + " | " + board[7] + " | " + board[8])

def check_win(board):#This function defined a list of tuples, where each tuple represents a wining input
    """Checks if there is a winner."""
    wins = [(0, 1, 2), (3, 4, 5), (6, 7, 8), (0, 3, 6),
            (1, 4, 7), (2, 5, 8), (0, 4, 8), (2, 4, 6)] #list of tuples for wining combination
    for win in wins:#This loop iterates through each winning combination
        if board[win[0]] == board[win[1]] == board[win[2]] and board[win[0]] != "-":#Check if all three positions in current wining combination have same player's and are not empty
            return board[win[0]] #If a winner is found, the function returns winning player's mark
    return None

def play_game(): #This defines the main function to run the game
    """Main function to play the Tic Tac Toe game."""
    board = ["-", "-", "-", "-", "-", "-", "-", "-", "-"] #Initializes the board with empty spaces represented by -
    current_player = "X" #Sets the starting player to X
    game_over = False #Initializes the game state to not over.

    while not game_over: #This loop continues as long as the game is not over
        print_board(board)
        move = input("Player " + current_player + ", enter your move (1-9): ")

        try:
            move = int(move) - 1
            if 0 <= move <= 8 and board[move] == "-":
                board[move] = current_player
                winner = check_win(board)

                if winner:
                    print_board(board)
                    print("Player " + winner + " wins!")
                    game_over = True
                elif "-" not in board:
                    print_board(board)
                    print("It's a tie!")
                    game_over = True
                else:
                    current_player = "O" if current_player == "X" else "X"
            else:
                print("Invalid move. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a number between 1 and 9.")

    save_game_prompt = input("Do you want to save the game? (y/n): ")
    if save_game_prompt.lower() == "y":
        save_game(board, current_player)

def save_game(board, current_player):
    """Saves the current game state to a file."""
    try:
        with open("game_state.txt", "w") as file:
            file.write(",".join(board) + "\n")
            file.write("Player Turn: " + current_player)
        print("Game state saved!")
    except IOError:
        print("Error saving game state.")

def load_game():
    """Loads a saved game state from a file."""
    try:
        with open("game_state.txt", "r") as file:
            board = file.readline().strip().split(",")
            player_turn_line = file.readline().strip()

            # Check if the line contains "Player Turn:" before splitting
            if ": " in player_turn_line:
                current_player = player_turn_line.split(": ")[1]
            else:
                current_player = "X"  # Default to player X if not found

        return board, current_player
    except FileNotFoundError:
        print("No saved game found.")
        return None, None
    except IOError:
        print("Error loading game state.")
        return None, None

if __name__ == "__main__":
    print("Welcome to Tic Tac Toe!")

    load_saved_game = input("Do you want to load a saved game? (y/n): ")
    if load_saved_game.lower() == "y":
        board, current_player = load_game()
        if board and current_player:
            play_game()  # Resume the game with loaded state
    else:
        play_game()  # Start a new game